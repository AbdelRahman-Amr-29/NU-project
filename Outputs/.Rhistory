write.csv(braak_lewy_body_stage_5_metadata, "stage_5_metadata.csv", row.names = TRUE)
# download the first column from the data file contains ids
write.csv(braak_lewy_body_stage_5_metadata, "stage_5_metadata.csv", row.names = TRUE)
# download the first column from the data file contains ids
write.csv(braak_lewy_body_stage_5_metadata, "stage_5_metadata.csv", row.names = TRUE)
################################ DESeq2 object ######################
# read in the metadata we have adjusted lately
colData <- read.csv("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/Outputs/stage_5_metadata.csv")
View(colData)
# Set the row names of the dataframe to the values in the sample_name column
rownames(colData) <- colData$samples_name
View(colData)
# Set the row names of the dataframe to the values in the sample_name column
rownames(colData) <- colData$X
View(colData)
# remove the first column from the meatadata_modified
colData <- colData[, -1]
View(colData)
all(colnames(data_5_ordered) %in% rownames(colData))
#check the order
all(colnames(data_5_ordered) == rownames(colData))
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
# Convert all columns to integer
data_5_ordered <- lapply(data_5_ordered, as.integer)
data_5_ordered <- data_ordered %>%
dplyr::select(1, 2, 3, 4, 5, 6, 9, 10, 13, 14,
17, 18, 19, 22, 23, 26, 27, 29,
33, 34, 37, 38, 43, 44, 46, 54, 55,
60, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83)
View(data_5_ordered)
# Convert numeric columns to integer
numeric_columns <- sapply(data_5_ordered, is.numeric)
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
View(data_5_ordered)
#check the order
all(colnames(data_5_ordered) == rownames(colData))
#check the row names in colData match with column names with data_5_ordered
all(colnames(data_5_ordered) %in% rownames(colData))
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
dds
# remove rows that have value less than 10
keep <- rowSums(counts(dds)) >= 10
keep
keep
# remove rows that have value less than 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
dds
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 0)
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 0)
class(dds$braak_lewy_body_stage)
for (i in 1:ncol(data_5_ordered)) {
data_5_ordered[[i]] <- factor(data_5_ordered[[i]])
}
for (i in 1:ncol(data_5_ordered)) {
data_5_ordered[[i]] <- factor(data_5_ordered[[i]])
}
View(data_5_ordered)
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
data_5_ordered <- for (i in 1:ncol(data_5_ordered)) {
data_5_ordered[[i]] <- factor(data_5_ordered[[i]])
}
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
data_5_ordered <- data_ordered %>%
dplyr::select(1, 2, 3, 4, 5, 6, 9, 10, 13, 14,
17, 18, 19, 22, 23, 26, 27, 29,
33, 34, 37, 38, 43, 44, 46, 54, 55,
60, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83)
#check the row names in colData match with column names with data_5_ordered
all(colnames(data_5_ordered) %in% rownames(colData))
#check the order
all(colnames(data_5_ordered) == rownames(colData))
# Convert numeric columns to integer
numeric_columns <- sapply(data_5_ordered, is.numeric)
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
data_5_ordered <- for (i in 1:ncol(data_5_ordered)) {
data_5_ordered[[i]] <- factor(data_5_ordered[[i]])
}
data_5_ordered <- data_ordered %>%
dplyr::select(1, 2, 3, 4, 5, 6, 9, 10, 13, 14,
17, 18, 19, 22, 23, 26, 27, 29,
33, 34, 37, 38, 43, 44, 46, 54, 55,
60, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83)
#check the row names in colData match with column names with data_5_ordered
all(colnames(data_5_ordered) %in% rownames(colData))
#check the order
all(colnames(data_5_ordered) == rownames(colData))
# Convert numeric columns to integer
numeric_columns <- sapply(data_5_ordered, is.numeric)
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
for (i in 1:ncol(data_5_ordered)) {
data_5_ordered[[i]] <- factor(data_5_ordered[[i]])
}
View(data_5_ordered)
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 0)
dds$braak_lewy_body_stage
# Convert row names (if stored as row names) to factors
rownames(data_5_ordered) <- factor(rownames(data_5_ordered))
# Convert all columns to factors
data_5_ordered <- as.data.frame(lapply(data_5_ordered, factor))
View(data_5_ordered)
# Convert row names (if stored as row names) to factors
rownames(data_5_ordered) <- factor(rownames(data_5_ordered))
View(data_5_ordered)
data_5_ordered <- data_ordered %>%
dplyr::select(1, 2, 3, 4, 5, 6, 9, 10, 13, 14,
17, 18, 19, 22, 23, 26, 27, 29,
33, 34, 37, 38, 43, 44, 46, 54, 55,
60, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83)
View(data_5_ordered)
# Convert numeric columns to integer
numeric_columns <- sapply(data_5_ordered, is.numeric)
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
View(data_5_ordered)
# Convert all columns to factors
data_5_ordered <- as.data.frame(lapply(data_5_ordered, factor))
View(data_5_ordered)
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 0)
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
View(data_5_ordered)
data_5_ordered <- data_ordered %>%
dplyr::select(1, 2, 3, 4, 5, 6, 9, 10, 13, 14,
17, 18, 19, 22, 23, 26, 27, 29,
33, 34, 37, 38, 43, 44, 46, 54, 55,
60, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83)
library(dplyr)
library(tidyverse)
library(GEOquery)
library(annotables)
library(org.Hs.eg.db)
library(purrr)
library(ggplot2)
library(DESeq2)
library(airway)
data_5_ordered <- data_ordered %>%
dplyr::select(1, 2, 3, 4, 5, 6, 9, 10, 13, 14,
17, 18, 19, 22, 23, 26, 27, 29,
33, 34, 37, 38, 43, 44, 46, 54, 55,
60, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83)
View(data_5_ordered)
View(colData)
################################ DESeq2 ######################
# read in the metadata we have adjusted lately
colData <- read.csv("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/Outputs/stage_5_metadata.csv")
# Set the row names of the dataframe to the values in the sample_name column
rownames(colData) <- colData$X
# remove the first column from the meatadata_modified
colData <- colData[, -1]
#check the row names in colData match with column names with data_5_ordered
all(colnames(data_5_ordered) %in% rownames(colData))
#check the order
all(colnames(data_5_ordered) == rownames(colData))
# Convert numeric columns to integer
numeric_columns <- sapply(data_5_ordered, is.numeric)
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
View(data_5_ordered)
View(colData)
# Convert 'braak_lewy_body_stage' column to factor
colData$braak_lewy_body_stage <- factor(colData$braak_lewy_body_stage)
View(colData)
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
dds
# remove rows that have value less than 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 0)
colData <- colData %>%
mutate(braak_lewy_body_stage = gsub(0, "control", braak_lewy_body_stage)) %>%
mutate(braak_lewy_body_stage = gsub(5, "PD stage 5", braak_lewy_body_stage))
View(colData)
#check the row names in colData match with column names with data_5_ordered
all(colnames(data_5_ordered) %in% rownames(colData))
#check the order
all(colnames(data_5_ordered) == rownames(colData))
# Convert numeric columns to integer
numeric_columns <- sapply(data_5_ordered, is.numeric)
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
# Convert 'braak_lewy_body_stage' column to factor
colData$braak_lewy_body_stage <- factor(colData$braak_lewy_body_stage)
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
dds
# remove rows that have value less than 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
dds
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 'control')
dds$braak_lewy_body_stage
# Run DESeq
dds <- DESeq(dds)
colData <- colData %>%
mutate(braak_lewy_body_stage = gsub(0, "control", braak_lewy_body_stage)) %>%
mutate(braak_lewy_body_stage = gsub(5, "PD", braak_lewy_body_stage))
View(colData)
colData <- colData %>%
mutate(braak_lewy_body_stage = gsub("PD stage PD", "PD", braak_lewy_body_stage))
View(colData)
View(data_5_ordered)
#check the row names in colData match with column names with data_5_ordered
all(colnames(data_5_ordered) %in% rownames(colData))
#check the order
all(colnames(data_5_ordered) == rownames(colData))
# Convert 'braak_lewy_body_stage' column to factor
colData$braak_lewy_body_stage <- factor(colData$braak_lewy_body_stage)
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
dds
# remove rows that have value less than 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
dds
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 'control')
# Run DESeq
dds <- DESeq(dds)
dds$braak_lewy_body_stage
# Run DESeq
dds <- DESeq(dds)
res <- results(dds)
res
# Explore Results
summary(res)
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)
res0.025 <- results(dds, alpha = 0.025)
summary(res0.025)
res0.05 <- results(dds, alpha = 0.05)
summary(res0.05)
# contrasts
resultsNames(dds)
# MA plot
plotMA(res)
# MA plot
plotMA(res0.05)
res0.1 <- results(dds, alpha = 0.1)
summary(res0.1)
# contrasts
resultsNames(dds)
# MA plot
plotMA(res0.1)
# MA plot
plotMA(res0.1)
rld <- rlog(dds, blind = TRUE)
ggplot(data_5_ordered) +
geom_histogram(aes(x = sample_R1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
ggplot(data_5_ordered) +
geom_histogram(aes(x = sample_R2), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
mean_counts <- apply(data_5_ordered[,6:8], 1, mean)        #The second argument '1' of 'apply' function indicates the function being applied to rows. Use '2' if applied to columns
variance_counts <- apply(data_5_ordered[,6:8], 1, var)
df <- data.frame(mean_counts, variance_counts)
ggplot(df) +
geom_point(aes(x=mean_counts, y=variance_counts)) +
scale_y_log10(limits = c(1,1e9)) +
scale_x_log10(limits = c(1,1e9)) +
geom_abline(intercept = 0, slope = 1, color="red")
ggplot(df) +
geom_point(aes(x=mean_counts, y=variance_counts)) +
scale_y_log10(limits = c(1,1e9)) +
scale_x_log10(limits = c(1,1e9)) +
geom_abline(intercept = 0, slope = 1, color="blue")
### Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
### Plot PCA
plotPCA(rld, intgroup="braak_lewy_body_stage")
# create plot
plotDispEsts(dds)
# Setting working directory
setwd("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/Outputs")
library(dplyr)
library(tidyverse)
library(GEOquery)
library(annotables)
library(org.Hs.eg.db)
library(purrr)
library(ggplot2)
library(DESeq2)
library(airway)
#################################################
# Read txt file & convert it to table
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/Data/GSE216281_raw_data.txt", header = TRUE, sep = " ")
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
View(data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
View(data)
# extract first column
ids <- data[ , 1, drop = FALSE]
View(ids)
# download the first column from the data file contains ids
write.csv(ids, "ensembl_gene_ids.csv", row.names = FALSE)
# read the ensembl_gene_ids file to use it in the next step
ensembl_ids <- read.csv("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/Outputs/ensembl_gene_ids.csv", header = TRUE)
View(ensembl_ids)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
mapper <- mapIds(org.Hs.eg.db,
keys = ensembl_ids$ensembl_gene_id,
keytype = "ENSEMBL",
column = "SYMBOL")
mapper.df <- as.data.frame(mapper)
View(mapper.df)
mapper.df <- cbind(rownames(mapper.df), mapper.df)
View(mapper.df)
names(mapper.df) <- c("ensembl_gene_id","symbol")
combined_data <- merge(mapper.df, data, by = "ensembl_gene_id", all.x = TRUE)
View(combined_data)
combined_data <- combined_data[, -1]
View(combined_data)
combined_data <- combined_data[ ! is.na(combined_data$symbol),]
x <- duplicated(combined_data$symbol)
sum(x)
####remove  duplication by aggregation
final_data.agg= aggregate(combined_data, list(combined_data$symbol),FUN=mean)
View(final_data.agg)
final_data.agg <- final_data.agg[, -2]
final_data_agg <- colnames(final_data.agg)[1] <- "symbol"
# Set the 'symbol' column as row names
row.names(final_data.agg) <- final_data.agg$symbol
View(final_data.agg)
# remove symbol column
final_data.agg <- final_data.agg[ , -1]
########################################################
# get metadata
gse <- getGEO(GEO = "GSE216281", GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
View(metadata)
metadata_modified <- metadata %>%
select(21, 1, 2, 11, 12, 13) %>%
rename(samples_name = description.1) %>%
rename(gender = characteristics_ch1.1) %>%
rename(braak_lewy_body_stage = characteristics_ch1.2) %>%
rename(age_of_death = characteristics_ch1.3) %>%
mutate(gender = gsub("Sex: ", "", gender)) %>%
mutate(braak_lewy_body_stage = gsub("braak lewy_body_stage: ", "", braak_lewy_body_stage)) %>%
mutate(age_of_death = gsub("age at_death: ", "", age_of_death))
metadata_modified <- metadata %>%
dplyr::select(21, 1, 2, 11, 12, 13) %>%
rename(samples_name = description.1) %>%
rename(gender = characteristics_ch1.1) %>%
rename(braak_lewy_body_stage = characteristics_ch1.2) %>%
rename(age_of_death = characteristics_ch1.3) %>%
mutate(gender = gsub("Sex: ", "", gender)) %>%
mutate(braak_lewy_body_stage = gsub("braak lewy_body_stage: ", "", braak_lewy_body_stage)) %>%
mutate(age_of_death = gsub("age at_death: ", "", age_of_death))
View(metadata_modified)
# Remove row names from a metadata_modified frame
rownames(metadata_modified) <- NULL
View(metadata_modified)
# Set the row names of the dataframe to the values in the sample_name column
rownames(metadata_modified) <- metadata_modified$samples_name
View(metadata_modified)
# remove the first column from the meatadata_modified
metadata_modified <- metadata_modified[, -1]
View(metadata_modified)
all(colnames(final_data.agg) %in% rownames(metadata_modified))
all(rownames(metadata_modified) %in% colnames(final_data.agg))
########################################
# know the right order indexing
data_idx <- match(rownames(metadata_modified), colnames(final_data.agg))
data_idx
# Reorder the counts data frame to have the sample names in the same order as the metadata data frame
data_ordered  <- final_data.agg[ , data_idx]
View(data_ordered)
# check if that they are in the same order
all(rownames(metadata_modified) == colnames(data_ordered))
meta_5_data <- metadata_modified %>%
filter(braak_lewy_body_stage == 0 | braak_lewy_body_stage == 5)
View(meta_5_data)
# download the modified metadata to use it in the analysis
write.csv(braak_lewy_body_stage_5_metadata, "stage_5_metadata.csv", row.names = TRUE)
# download the modified metadata to use it in the analysis
write.csv(meta_5_data, "stage_5_metadata.csv", row.names = TRUE)
data_5_ordered <- data_ordered %>%
dplyr::select(1, 2, 3, 4, 5, 6, 9, 10, 13, 14,
17, 18, 19, 22, 23, 26, 27, 29,
33, 34, 37, 38, 43, 44, 46, 54, 55,
60, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83)
View(data_5_ordered)
################################ DESeq2 ######################
# read in the metadata we have adjusted lately
colData <- read.csv("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/Outputs/stage_5_metadata.csv")
View(colData)
# Set the row names of the dataframe to the values in the sample_name column
rownames(colData) <- colData$X
View(colData)
# remove the first column from the meatadata_modified
colData <- colData[, -1]
View(colData)
colData <- colData %>%
mutate(braak_lewy_body_stage = gsub("PD stage PD", "PD", braak_lewy_body_stage))
View(colData)
colData <- colData %>%
mutate(meta_5_data = gsub("PD stage PD", "PD", meta_5_data))
colData <- colData %>%
mutate(meta_5_data = gsub(0, "control", meta_5_data)) %>%
mutate(meta_5_data = gsub(5, "PD", meta_5_data))
View(colData)
colData <- colData %>%
mutate(braak_lewy_body_stage = gsub(0, "control", braak_lewy_body_stage)) %>%
mutate(braak_lewy_body_stage = gsub(5, "PD", braak_lewy_body_stage))
View(colData)
#check the row names in colData match with column names with data_5_ordered
all(colnames(data_5_ordered) %in% rownames(colData))
#check the order
all(colnames(data_5_ordered) == rownames(colData))
?vst
# Convert numeric columns to integer
numeric_columns <- sapply(data_5_ordered, is.numeric)
# Convert numeric columns to integer format
data_5_ordered[, numeric_columns] <- lapply(data_5_ordered[, numeric_columns], as.integer)
View(data_5_ordered)
# Convert 'braak_lewy_body_stage' column to factor
colData$braak_lewy_body_stage <- factor(colData$braak_lewy_body_stage)
View(colData)
ggplot(data_5_ordered) +
geom_histogram(aes(x = sample_R1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
mean_counts <- apply(data_5_ordered[,6:8], 1, mean)        #The second argument '1' of 'apply' function indicates the function being applied to rows. Use '2' if applied to columns
variance_counts <- apply(data_5_ordered[,6:8], 1, var)
df <- data.frame(mean_counts, variance_counts)
View(df)
ggplot(df) +
geom_point(aes(x=mean_counts, y=variance_counts)) +
scale_y_log10(limits = c(1,1e9)) +
scale_x_log10(limits = c(1,1e9)) +
geom_abline(intercept = 0, slope = 1, color="red")
dds <- DESeqDataSetFromMatrix(countData = data_5_ordered,
colData = colData,
design = ~ braak_lewy_body_stage)
dds
view(counts(dds))
# remove rows that have value less than 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# set the factor level
dds$braak_lewy_body_stage <-  relevel(dds$braak_lewy_body_stage, ref = 'control')
# Run DESeq
dds <- DESeq(dds)
res <- results(dds)
res
# Explore Results
summary(res)
### Transform counts for data visualization
rld <- vst(dds, blind=TRUE)
### Plot PCA
plotPCA(rld, intgroup="braak_lewy_body_stage")
plotPCA(rld, intgroup="gender")
plotPCA(rld, intgroup="age_of_death")
# installing packages
#BiocManager::install("biomaRt")
#install.packages("devtools")
#devtools::install_github("stephenturner/annotables")
#BiocManager::install("org.Hs.eg.db")
#BiocManager::install('airway')
install.packages("pheatmap")
library(pheatmap)
#### Hierarchical Clustering
### Extract the rlog matrix from the object
rld_mat <- assay(rld)
### Compute pairwise correlation values
rld_cor <- cor(rld_mat)
## check the output of cor(), make note of the row names and column names
head(rld_cor)
head(meta)
head(colData)
### Plot heatmap using the correlation matrix and the metadata object
pheatmap(rld_cor, annotation = colData)
# Explore Results
summary(res)
summary(res0.05)
res0.05 <- results(dds, alpha = 0.05)
summary(res0.05)
# contrasts
resultsNames(dds)
# MA plot
plotMA(res0.05)
# create plot
plotDispEsts(dds)
