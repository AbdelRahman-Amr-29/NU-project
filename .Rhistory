x=7
y=4
x+y
x-y
x=7
p=8
x+p
x>p
x==p
No1 <- readline("Enter 1st number : ")
No3 <- readline("Enter 3rd number : ")
}
{
No1 <- readline("Enter 1st number : ");
No2 <- readline("Enter 2st number : ");
No3 <- readline("Enter 3rd number : ");
No4 <- readline(" Enter 4th number : ");
}
mean(No1, No2, No3, No4)
{
No1 <- readline("Enter 1st number : ");
No2 <- readline("Enter 2st number : ");
No3 <- readline("Enter 3rd number : ");
No4 <- readline("Enter 4th number : ");
}
var1 = readline("Enter 1st number : ");
var3 = readline("Enter 3rd number ; ");
}
help(mean)
a <- readline("no1 : ")
x <- readline("no3 : ")
}
{
a <- readline("no1 : ");
b <- readline("no2 : ");
x <- readline("no3 : ");
y <- readline("no4 : ");
}
mean(a, b, x, y)
mean(a, b, x, y)
{
a <- readline("no1 : ");
b <- readline("no2 : ");
x <- readline("no3 : ");
y <- readline("no4 : ");
}
mean(a, b, x, y)
{
a <- readline("no1 : ");
b <- readline("no2 : ");
x <- readline("no3 : ");
y <- readline("no4 : ");
}
a = as.integer(a)
b = as.integer(b)
x = as.integer(x)
y = as.integer(y)
mean(a, b, x, y)
{
No1 <- readline("Enter 1st number: ");
No2 <- readline("Enter 2nd number: ");
No3 <- readline("Enter 3rd nimber: ");
No4 <- readline("Enter 4th number: ");
}
No1 <- as.integer(No1)
No2 <- as.integer(No2)
No3 <- as.integer(No3)
No4 <- as.integer(No4)
mean(No1, No2, No3, No4)
avg(No1, No2, No3, No4)
print(mean(Nu1, Nu2, Nu3, Nu4))
{
Nu1 <- readline("Enter 1st number: ");
Nu2 <- readline("Enter 2nd number: ");
Nu3 <- readline("Enter 3rd nimber: ");
Nu4 <- readline("Enter 4th number: ");
}
Nu1 <- as.integer(No1)
Nu2 <- as.integer(No2)
Nu3 <- as.integer(No3)
Nu4 <- as.integer(No4)
print(mean(Nu1, Nu2, Nu3, Nu4))
Nu1 + Nu3
mean(Nu1, Nu2)
mean(8, 6, 8)
mean(4, 4, 4)
mean(No1, No2)
mean(no1, no2, no3, no4)
mean(No1, No2, No3, No4)
clearPushBack()
{
X <- readline(prompt = "Enter 1st number: ");
y <- readline(prompt = "Enter 2nd number: ");
z <- readline(prompt = "ENter 3rd number: ");
a <- readline(prompt = "Enter 4th number: ");
}
x <- as.integer(x)
X <- as.integer(X)
y <- as.integer(y)
z <- as.integer(z)
a <- as.integer(a)
mean(X, y, z, a)
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(mean(a, b, x, y))
help(mean)
print(mean(a, b, x, y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(mean(a, b, x, y))
help(average)
??average
??avg
print(mean(a:y))
print(mean(a,b,x,y))
print(mean(a:y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(mean(a:y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(mean(a:y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(mean(a:y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(sum(a,b,x,y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(sum(a,b,x,y))
print(mean(a,b,x,y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
c <- as.integer(readline(prompt = "Enter 3rd number: "));
d <- as.integer(readline(prompt = "Enter 4th number: "));
}
x <- sum(a, b, c, d)
avg <- x/4
print(paste("The average of the four unmbers is: ", avg))
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1)
print(v2)
print(v1 + v2)
print(v1 * v2)
print(v1 / v2)
print(v1 - v2)
#
v1 > v2
v1 < v2
v1 == v2
#
help(cat)
#
cat("Vector 1 greater than vector 2: ", v1 > v2, "\n")
vec1 <- c(0, 2)
vec2 <- c(2, 3)
cat ("Vector1 less than Vector2 :", vec1 < vec2, "\n")
cat ("Vector1 less than equal to Vector2 :", vec1 <= vec2, "\n")
cat ("Vector1 greater than Vector2 :", vec1 > vec2, "\n")
cat ("Vector1 greater than equal to Vector2 :", vec1 >= vec2, "\n")
cat ("Vector1 not equal to Vector2 :", vec1 != vec2, "\n")
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
gene1 = c(2,4,6)
gene2= c(1,3,5)
gene3= c(6,5,2)
outcome= c('cancer', 'cancer', 'normal')
exp_data = data.frame(gene1, gene2, gene3, outcome)
row.names(exp_data)=c('sample1', 'sample2','sample3')
exp_data
exp_data[1,]
exp_data[,2]
exp_data[3,2]
exp_data[1:2 , 3:4]
exp_data[c(1,2), c(2,3,4)]
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
install.packages("randomNames")
Name= randomNames::randomNames(5)
Age = runif(5, min = 20 ,max = 60)
Height = runif(5, min = 120, max = 209)
Weight = runif(5, min = 30 , max = 200)
Name= randomNames::randomNames(5)
Age = as.integer(runif(5, min = 20 ,max = 60))
Height = runif(5, min = 120, max = 209)
Weight = runif(5, min = 30 , max = 200)
datfrm <- data.frame(Name, Age, Height, Weight)
print(datfrm)
datmtrx = data.matrix(datfrm)
print(datmtrx)
mean_values = apply(datmtrx, 2, mean)
median_values = apply(datmtrx, 2, median)
sd_values = apply(datmtrx, 2, sd)
cat("Mean:", mean_values, "\n")
cat("Median:", median_values, "\n")
cat("Standard Deviation:", sd_values, "\n")
View(datmtrx)
View(datfrm)
View(datmtrx)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("BiocManager")
BiocManager::install("stats")
install.packages("readxl")
BiocManager::install("stats")
setwd("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281")
library(dplyr)
library(tidyverse)
library(GEOquery)
data <- read.csv ("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt")
data <- read.table(("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
write.csv(data, "C:/Users/arahm/Downloads/GSE216281_counts.csv", row.names = FALSE)
# Converting text file to csv
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
# Converting text file to csv
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
View(raw_data)
View(raw_data)
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
########################################################
# convert ensemble id to gene names
ensembl <- useEnsembl(biomart = "genes")
library(biomaRt)
# Converting text file to csv
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
########################################################
# convert ensemble id to gene names
ensembl <- useEnsembl(biomart = "genes")
datasets <- listDatasets(ensembl)
ensembl.con <-  useMart("ensembl", dataset = 'hsapiens_gene_ensembl')
attr <- listAttributes(ensembl.con)
filters <- listFilters(ensembl.con)
gene_ids <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name'), filters = "ensembl_gene_id", values = data$ensembl_gene_id, mart = ensembl.con)
# Combine the gene names to data file
combined_data <- merge(gene_ids,data, by = "ensembl_gene_id", all = TRUE)
# delete first column
combined_data <- combined_data[, -1]
# rename first column to gene_name
colnames(combined_data)[1] <- "gene_name"
View(combined_data)
#get metadata
gse <- getGEO(GEO = "GSE216281", GSEMatrix = TRUE)
gse
metadata <- pData(phenoData(gse[[1]]))
#get metadata
gse <- getGEO(GEO = "GSE216281", GSEMatrix = TRUE)
gse
metadata <- pData(phenoData(gse[[1]]))
head(combined_data)
head(metadata)
combined_data <- combined_data %>%
rename(Braak_Group_5_F (sample_R1) = sample_R1) %>%
combined_data <- combined_data %>%
rename(Braak_Group_5_F_(sample_R1) = sample_R1) %>%
new_data <- combined_data %>%
rename(Braak_Group_5_F (sample_R1) = sample_R1) %>%
new_data <- combined_data %>%
rename(Braak_Group_5_F (sample_R1) = GSM6665880) %>%
colnames(combined_data)[2] <- "Braak_Group_5_F (sample_R1)"
View(combined_data)
View(metadata)
rownames(metadata) %in colnames(combined_data)
rownames(metadata) %in% colnames(combined_data)
colnames(combined_data) %in% rownames(metadata)
any(colnames(combined_data)) %in% rownames(metadata)
any(colnames(combined_data) %in% rownames(metadata))
combined_data
metadata
colnames(combined_data)[3] <- "Braak_Group_1-4_M (sample_R10)"
colnames(combined_data)[3] <- "Braak_Group_1-4_M sample_R10"
any(colnames(combined_data) %in% rownames(metadata))
colnames(combined_data) %in% rownames(metadata)
colnames(combined_data)[2] <- "GSM6665880"
any(colnames(combined_data) %in% rownames(metadata))
metadata <- cbind(sample_name = rownames(metadata), metadata)
metadata <- pData(phenoData(gse[[1]]))
metadata <- cbind(sample_name = rownames(metadata), metadata)
# Remove row names from a raw_data frame
rownames(data) <- NULL
metadata <- pData(phenoData(gse[[1]]))
metadata.modified <- cbind(sample_condition = rownames(metadata), metadata)
View(metadata.modified)
metadata <- cbind(sample_condition = rownames(metadata), metadata)
# Remove row names from a raw_data frame
rownames(metadata) <- NULL
metadata <- pData(phenoData(gse[[1]]))
metadata <- cbind(sample_condition = rownames(metadata), metadata)
# Remove row names from a raw_data frame
rownames(metadata) <- NULL
metadata.modified <- cbind(sample_condition = rownames(metadata), metadata)
metadata.modified <- metadata.modified[, -1]
metadata.modified <- metadata.modified[, -2]
metadata <- pData(phenoData(gse[[1]]))
metadata.modified <- cbind(sample_condition = rownames(metadata), metadata)
metadata.modified <- metadata.modified[, -1]
# Remove row names from a raw_data frame
rownames(metadata.modified) <- NULL
# Remove row names from a raw_data frame
rownames(metadata.modified)
# remove symbol column
final_data.agg <- final_data.agg[ , -1]
