b <- as.integer(readline(prompt = "Enter 2nd number: "));
x <- as.integer(readline(prompt = "Enter 3rd number: "));
y <- as.integer(readline(prompt = "Enter 4th number: "));
}
print(sum(a,b,x,y))
print(mean(a,b,x,y))
{
a <- as.integer(readline(prompt = "Enter 1st number: "));
b <- as.integer(readline(prompt = "Enter 2nd number: "));
c <- as.integer(readline(prompt = "Enter 3rd number: "));
d <- as.integer(readline(prompt = "Enter 4th number: "));
}
x <- sum(a, b, c, d)
avg <- x/4
print(paste("The average of the four unmbers is: ", avg))
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1)
print(v2)
print(v1 + v2)
print(v1 * v2)
print(v1 / v2)
print(v1 - v2)
#
v1 > v2
v1 < v2
v1 == v2
#
help(cat)
#
cat("Vector 1 greater than vector 2: ", v1 > v2, "\n")
vec1 <- c(0, 2)
vec2 <- c(2, 3)
cat ("Vector1 less than Vector2 :", vec1 < vec2, "\n")
cat ("Vector1 less than equal to Vector2 :", vec1 <= vec2, "\n")
cat ("Vector1 greater than Vector2 :", vec1 > vec2, "\n")
cat ("Vector1 greater than equal to Vector2 :", vec1 >= vec2, "\n")
cat ("Vector1 not equal to Vector2 :", vec1 != vec2, "\n")
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
gene1 = c(2,4,6)
gene2= c(1,3,5)
gene3= c(6,5,2)
outcome= c('cancer', 'cancer', 'normal')
exp_data = data.frame(gene1, gene2, gene3, outcome)
row.names(exp_data)=c('sample1', 'sample2','sample3')
exp_data
exp_data[1,]
exp_data[,2]
exp_data[3,2]
exp_data[1:2 , 3:4]
exp_data[c(1,2), c(2,3,4)]
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
v1 <- runif(5, min = 0, max = 20)
v2 <- runif(5, min = 0, max = 20)
print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(v1 / v2)
#
cat("Vector 1 is greater than vector 2: ", v1 > v2, "\n")
cat("Vector 1 is less than vector 2: ", v1 < v2, "\n")
cat("Vector 1 is equal to vector 2: ", v1 == v2, "\n")
install.packages("randomNames")
Name= randomNames::randomNames(5)
Age = runif(5, min = 20 ,max = 60)
Height = runif(5, min = 120, max = 209)
Weight = runif(5, min = 30 , max = 200)
Name= randomNames::randomNames(5)
Age = as.integer(runif(5, min = 20 ,max = 60))
Height = runif(5, min = 120, max = 209)
Weight = runif(5, min = 30 , max = 200)
datfrm <- data.frame(Name, Age, Height, Weight)
print(datfrm)
datmtrx = data.matrix(datfrm)
print(datmtrx)
mean_values = apply(datmtrx, 2, mean)
median_values = apply(datmtrx, 2, median)
sd_values = apply(datmtrx, 2, sd)
cat("Mean:", mean_values, "\n")
cat("Median:", median_values, "\n")
cat("Standard Deviation:", sd_values, "\n")
View(datmtrx)
View(datfrm)
View(datmtrx)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("BiocManager")
BiocManager::install("stats")
install.packages("readxl")
BiocManager::install("stats")
setwd("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281")
library(dplyr)
library(tidyverse)
library(GEOquery)
data <- read.csv ("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt")
data <- read.table(("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
write.csv(data, "C:/Users/arahm/Downloads/GSE216281_counts.csv", row.names = FALSE)
# Converting text file to csv
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
# Converting text file to csv
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
View(raw_data)
View(raw_data)
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
########################################################
# convert ensemble id to gene names
ensembl <- useEnsembl(biomart = "genes")
library(biomaRt)
# Converting text file to csv
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
########################################################
# convert ensemble id to gene names
ensembl <- useEnsembl(biomart = "genes")
datasets <- listDatasets(ensembl)
ensembl.con <-  useMart("ensembl", dataset = 'hsapiens_gene_ensembl')
attr <- listAttributes(ensembl.con)
filters <- listFilters(ensembl.con)
gene_ids <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name'), filters = "ensembl_gene_id", values = data$ensembl_gene_id, mart = ensembl.con)
# Combine the gene names to data file
combined_data <- merge(gene_ids,data, by = "ensembl_gene_id", all = TRUE)
# delete first column
combined_data <- combined_data[, -1]
# rename first column to gene_name
colnames(combined_data)[1] <- "gene_name"
View(combined_data)
#get metadata
gse <- getGEO(GEO = "GSE216281", GSEMatrix = TRUE)
gse
metadata <- pData(phenoData(gse[[1]]))
#get metadata
gse <- getGEO(GEO = "GSE216281", GSEMatrix = TRUE)
gse
metadata <- pData(phenoData(gse[[1]]))
head(combined_data)
head(metadata)
combined_data <- combined_data %>%
rename(Braak_Group_5_F (sample_R1) = sample_R1) %>%
combined_data <- combined_data %>%
rename(Braak_Group_5_F_(sample_R1) = sample_R1) %>%
new_data <- combined_data %>%
rename(Braak_Group_5_F (sample_R1) = sample_R1) %>%
new_data <- combined_data %>%
rename(Braak_Group_5_F (sample_R1) = GSM6665880) %>%
colnames(combined_data)[2] <- "Braak_Group_5_F (sample_R1)"
View(combined_data)
View(metadata)
rownames(metadata) %in colnames(combined_data)
rownames(metadata) %in% colnames(combined_data)
colnames(combined_data) %in% rownames(metadata)
any(colnames(combined_data)) %in% rownames(metadata)
any(colnames(combined_data) %in% rownames(metadata))
combined_data
metadata
colnames(combined_data)[3] <- "Braak_Group_1-4_M (sample_R10)"
colnames(combined_data)[3] <- "Braak_Group_1-4_M sample_R10"
any(colnames(combined_data) %in% rownames(metadata))
colnames(combined_data) %in% rownames(metadata)
colnames(combined_data)[2] <- "GSM6665880"
any(colnames(combined_data) %in% rownames(metadata))
metadata <- cbind(sample_name = rownames(metadata), metadata)
metadata <- pData(phenoData(gse[[1]]))
metadata <- cbind(sample_name = rownames(metadata), metadata)
# Remove row names from a raw_data frame
rownames(data) <- NULL
metadata <- pData(phenoData(gse[[1]]))
metadata.modified <- cbind(sample_condition = rownames(metadata), metadata)
View(metadata.modified)
metadata <- cbind(sample_condition = rownames(metadata), metadata)
# Remove row names from a raw_data frame
rownames(metadata) <- NULL
metadata <- pData(phenoData(gse[[1]]))
metadata <- cbind(sample_condition = rownames(metadata), metadata)
# Remove row names from a raw_data frame
rownames(metadata) <- NULL
metadata.modified <- cbind(sample_condition = rownames(metadata), metadata)
metadata.modified <- metadata.modified[, -1]
metadata.modified <- metadata.modified[, -2]
metadata <- pData(phenoData(gse[[1]]))
metadata.modified <- cbind(sample_condition = rownames(metadata), metadata)
metadata.modified <- metadata.modified[, -1]
# Remove row names from a raw_data frame
rownames(metadata.modified) <- NULL
# Remove row names from a raw_data frame
rownames(metadata.modified)
setwd("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt")
# calling libraries
library(dplyr)
library(tidyverse)
library(GEOquery)
#################################################
# Read txt file & convert it to table
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
# Bind the row names with the "gene" column
data <- cbind(gene_id = rownames(raw_data), raw_data)
View(data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
View(data)
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
library(annotables)
View(data)
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
View(data)
########################################################
# input list of ensembl ID's
ensembl_ids <- read.delim(data, header = TRUE)
########################################################
# input list of ensembl ID's
ensembl_ids <- read.delim("data.txt", header = TRUE)
rownames(data)
rownames(raw_data)
write.csv(data, "C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281", row.names = FALSE)
write.csv(data, "GSE216281_counts", row.names = FALSE)
write.csv(data, "GSE216281_counts_ids", row.names = FALSE)
check_file <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids", header = TRUE, sep = " ")
View(check_file)
check_file <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids", header = TRUE, sep = " ")
#################################################
# Read txt file & convert it to table
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
check_file <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.txt", header = TRUE, sep = " ")
check_file <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv", header = TRUE, sep = " ")
install.packages("openxlsx")
library(openxlsx)
write.csv(data, "GSE216281_counts_ids", row.names = TRUE)
write.csv(data, "GSE216281_counts_ids", row.names = FALSE)
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
write.csv(data, "GSE216281_counts_ids", row.names = TRUE)
check_file <- read.("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv", header = TRUE, sep = " ")
check_file <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv", header = TRUE, sep = " ")
check_file <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids", header = TRUE, sep = " ")
View(check_file)
write.csv(data, "GSE216281_counts_ids.csv", row.names = FALSE)
library(readxl)
check_file <- read_excel("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv")
check_file <- read_excel("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids")
check_file <- read_excel("GSE216281_counts_ids.csv")
check_file <- read_excel("GSE216281_counts_ids.xls")
check_file <- read_excel("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv")
check_file <- readxl("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv")
library(readxl)
GSE216281_counts_ids <- read_excel("GSE216281_counts_ids.csv")
check_file <- read.csv("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv")
View(check_file)
count_data <- read.csv("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv")
View(count_data)
########################################################
# input list of ensembl ID's
ensembl_ids <- read.delim("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv", header = TRUE)
View(ensembl_ids)
########################################################
# input list of ensembl ID's
ensembl_ids <- read.delim("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts_ids.csv")
ids <- data[1, ]
View(ids)
ids <- data[ , 1]
head(ids)
write.csv(ids, "gene_ids", row.names = FALSE)
write.csv(ids, "gene_ids.csv", row.names = FALSE)
View(ensembl_ids)
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
View(data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
View(data)
# extract first column
ids <- data[ , c(1)]
head(ids)
write.csv(ids, "gene_ids.1.csv", row.names = FALSE)
# extract first column
ids <- data[ , 1, drop = FALSE]
View(ids)
head(ids)
write.csv(ids, "gene_ids.2.csv", row.names = FALSE)
View(ids)
# download the first column from the data file contains ids
write.csv(ids, "ensembl_gene_ids.csv", row.names = FALSE)
########################################################
# input list of ensembl ID's
ensembl_ids <- read.delim("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/ensembl_gene_ids.csv")
View(ensembl_ids)
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
datasets <- listDatasets(ensembl)
View(datasets)
ensembl.con <- useMart(ensembl, dataset = "hsapiens_gene_ensembl")
ensembl.con <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
attr <- listAttributes(ensembl.con)
View(attr)
listFilters(ensembl.con)
filters <- listFilters(ensembl.con)
View(filters)
View(ensembl_ids)
View(ids)
View(ensembl_ids)
getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = ensembl_ids$ensembl_gene_id,
mart = "ensembl.con")
getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = ensembl_ids$ensembl_gene_id,
mart = ensembl.con)
gene_name_id_ensembl <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = ensembl_ids$ensembl_gene_id,
mart = ensembl.con)
View(gene_name_id_ensembl)
########################################################
grch38
filter(ensgene %in% ensembl_ids$ensembl_gene_id)
grch38 %>%
filter(ensgene %in% ensembl_ids$ensembl_gene_id)
annot_way <- grch38 %>%
filter(ensgene %in% ensembl_ids$ensembl_gene_id)
View(annot_way)
########################################################
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
mapIds(org.Hs.eg.db,
keys = ensembl_ids$ensembl_gene_id,
keytype = "ENSEMBL",
column = "SYMBOL")
mapper <- mapIds(org.Hs.eg.db,
keys = ensembl_ids$ensembl_gene_id,
keytype = "ENSEMBL",
column = "SYMBOL")
mapper.df=as.data.frame(mapper)
View(mapper.df)
mapper.df=cbind(rownames(mapper.df), mapper.df)
View(mapper.df)
names(mapper.df)=c("ensemble.id","symbol")
View(mapper.df)
# rename first column to gene_name
colnames(data)[1] <- "ensemble.id"
View(data)
# rename first column to gene_name
colnames(data)[1] <- "ensemble_gene_id"
# rename first column to gene_name
colnames(data)[1] <- "ensembl_gene_id"
View(mapper.df)
names(mapper.df)=c("ensembl_gene_id","symbol")
combined_data <- merge(mapper.df, data, by = "ensembl_gene_id", all.x = TRUE)
View(combined_data)
combined_data <- combined_data[, -1]
combined_data <- combined_data[ ! is.na(combined_data2$symbol),]
combined_data <- combined_data[ ! is.na(combined_data$symbol),]
View(combined_data)
# Set the 'symbol' column as row names
row.names(combined_data) <- combined_data$symbol
x <- duplicated(combined_data$symbol)
sum(x)
final_data=combined_data[-dim(combined_data)[2]]
final_data=apply(final_data,2, as.numeric)
####remove  duplication by aggregation
final_data.agg= aggregate(final_data, list(combined_data$symbol),FUN=mean)
View(final_data.agg)
final_data.agg <- final_data.agg[, -2]
colnames(final_data.agg)[1] <- "symbol"
final_data_agg <- colnames(final_data.agg)[1] <- "symbol"
View(final_data.agg)
setwd("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt")
# calling libraries
library(dplyr)
library(tidyverse)
library(GEOquery)
library(biomaRt)
library(annotables)
library(org.Hs.eg.db)
#################################################
# Read txt file & convert it to table
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
View(raw_data)
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
View(data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
View(data)
# extract first column
ids <- data[ , 1, drop = FALSE]
View(data)
View(ids)
# download the first column from the data file contains ids
write.csv(ids, "ensembl_gene_ids.csv", row.names = FALSE)
########################################################
# input list of ensembl ID's
ensembl_ids <- read.delim("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/ensembl_gene_ids.csv")
View(ensembl_ids)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
mapper <- mapIds(org.Hs.eg.db,
keys = ensembl_ids$ensembl_gene_id,
keytype = "ENSEMBL",
column = "SYMBOL")
mapper.df <- as.data.frame(mapper)
View(mapper.df)
mapper.df <- cbind(rownames(mapper.df), mapper.df)
View(mapper.df)
names(mapper.df) <- c("ensembl_gene_id","symbol")
View(mapper.df)
combined_data <- merge(mapper.df, data, by = "ensembl_gene_id", all.x = TRUE)
View(combined_data)
combined_data <- combined_data[, -1]
combined_data <- combined_data[ ! is.na(combined_data$symbol),]
x <- duplicated(combined_data$symbol)
sum(x)
final_data=combined_data[-dim(combined_data)[2]]
final_data=apply(final_data,2, as.numeric)
####remove  duplication by aggregation
final_data.agg= aggregate(final_data, list(combined_data$symbol),FUN=mean)
View(final_data)
View(final_data.agg)
View(final_data)
setwd("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt")
# calling libraries
library(dplyr)
library(tidyverse)
library(biomaRt)
library(annotables)
library(org.Hs.eg.db)
#################################################
# Read txt file & convert it to table
raw_data <- read.table("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/GSE216281_counts.txt", header = TRUE, sep = " ")
# Bind the row names with the "gene" column
data <- cbind(ensembl_gene_id = rownames(raw_data), raw_data)
# Remove row names from a raw_data frame
rownames(data) <- NULL
# extract first column
ids <- data[ , 1, drop = FALSE]
# download the first column from the data file contains ids
write.csv(ids, "ensembl_gene_ids.csv", row.names = FALSE)
########################################################
# input list of ensembl ID's
ensembl_ids <- read.delim("C:/Users/arahm/OneDrive/Desktop/NU/tutorials/GSE216281/GSE216281_counts.txt/ensembl_gene_ids.csv")
View(ensembl_ids)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
mapper <- mapIds(org.Hs.eg.db,
keys = ensembl_ids$ensembl_gene_id,
keytype = "ENSEMBL",
column = "SYMBOL")
mapper.df <- as.data.frame(mapper)
View(mapper.df)
mapper.df <- cbind(rownames(mapper.df), mapper.df)
names(mapper.df) <- c("ensembl_gene_id","symbol")
combined_data <- merge(mapper.df, data, by = "ensembl_gene_id", all.x = TRUE)
View(combined_data)
combined_data <- combined_data[, -1]
View(combined_data)
combined_data <- combined_data[ ! is.na(combined_data$symbol),]
x <- duplicated(combined_data$symbol)
sum(x)
View(data)
####remove  duplication by aggregation
final_data.agg= aggregate(combined_data, list(combined_data$symbol),FUN=mean)
View(final_data.agg)
final_data.agg <- final_data.agg[, -2]
final_data_agg <- colnames(final_data.agg)[1] <- "symbol"
# Set the 'symbol' column as row names
row.names(final_data_agg) <- final_data_agg$symbol
# Set the 'symbol' column as row names
row.names(final_data.agg) <- final_data_agg$symbol
# Set the 'symbol' column as row names
row.names(final_data.agg) <- final_data.agg$symbol
View(final_data.agg)
final_data.agg <- final_data.agg[ , -1]
View(final_data.agg)
